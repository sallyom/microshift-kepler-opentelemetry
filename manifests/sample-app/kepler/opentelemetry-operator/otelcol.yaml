# This file is meant to be applied with an OpenShift cluster
# This creates a configmap with the CA for TLS and an OpenTelemetryCollector CR
# Apply this if running the OpenTelemetry Operator
# This applies in 'kepler' namespace, modify if running elsewhere
apiVersion: v1
kind: ConfigMap
metadata:
  annotations:
    service.beta.openshift.io/inject-cabundle: "true"
  name: otelcol-cabundle
  namespace: kepler
---
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otelcol
  namespace: kepler
spec:
  #hostNetwork: true
  #hostName: localhost
  serviceAccount: kepler-sa
  config: |
    receivers:
      otlp:
        protocols:
          http:
          grpc:
            max_recv_msg_size_mib: 999999999

      prometheus:
        config:
          scrape_configs:
          - job_name: 'otel-collector'
            scrape_interval: 5s
            static_configs:
            - targets: ['thanos-querier.openshift-monitoring.svc.cluster.local:9091']
            #- targets: ['<Kepler-Endpoint>:9102']

    processors:
      batch:

    exporters:
      logging:
        #loglevel: debug
      prometheusremotewrite:
        endpoint: https://<USERNAME>:<PASSWORD>@<PROMENDPOINTURL>
        # for me looks something like: 
        # endpoint: https://643999:eyJrIjoixxxxxxxxxxxxxxxxxxxxxxOH0=@prometheus-prod-10-prod-us-central-0.grafana.net/api/prom/push
      jaeger:
        endpoint: "jaeger-service.jaeger-ns.svc:14250" # Jaeger service URL
        tls:
          insecure: true

    service:
      pipelines:
        metrics:
          receivers: [prometheus]
          processors: [batch]
          exporters: [logging,prometheusremotewrite]
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [jaeger,logging]

  mode: deployment
  resources: {}
  targetAllocator: {}
  volumeMounts:
  - mountPath: /etc/pki/ca-trust/source/service-ca
    name: cabundle-volume
  volumes:
  - configMap:
      name: otelcol-cabundle
    name: cabundle-volume
